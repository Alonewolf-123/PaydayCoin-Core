# Copyright (c) 2013-2016 The PaydayCoin Core developers
# Distributed under the MIT software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

DIST_SUBDIRS = secp256k1 univalue

AM_LDFLAGS = $(PTHREAD_CFLAGS) $(LIBTOOL_LDFLAGS) $(HARDENED_LDFLAGS) $(GPROF_LDFLAGS) $(SANITIZER_LDFLAGS)
AM_CXXFLAGS = $(DEBUG_CXXFLAGS) $(HARDENED_CXXFLAGS) $(WARN_CXXFLAGS) $(NOWARN_CXXFLAGS) $(ERROR_CXXFLAGS) $(GPROF_CXXFLAGS) $(SANITIZER_CXXFLAGS)
AM_CPPFLAGS = $(DEBUG_CPPFLAGS) $(HARDENED_CPPFLAGS)
AM_LIBTOOLFLAGS = --preserve-dup-deps
EXTRA_LIBRARIES =

if EMBEDDED_UNIVALUE
LIBUNIVALUE = univalue/libunivalue.la

$(LIBUNIVALUE): $(wildcard univalue/lib/*) $(wildcard univalue/include/*)
	$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C $(@D) $(@F)
else
LIBUNIVALUE = $(UNIVALUE_LIBS)
endif

PAYDAYCOIN_INCLUDES=-I$(builddir) $(BDB_CPPFLAGS) $(BOOST_CPPFLAGS) $(LEVELDB_CPPFLAGS) $(CRYPTO_CFLAGS) $(SSL_CFLAGS)

PAYDAYCOIN_INCLUDES += -I$(srcdir)/secp256k1/include
PAYDAYCOIN_INCLUDES += $(UNIVALUE_CFLAGS)

LIBPAYDAYCOIN_SERVER=libpaydaycoin_server.a
LIBPAYDAYCOIN_COMMON=libpaydaycoin_common.a
LIBPAYDAYCOIN_CONSENSUS=libpaydaycoin_consensus.a
LIBPAYDAYCOIN_CLI=libpaydaycoin_cli.a
LIBPAYDAYCOIN_UTIL=libpaydaycoin_util.a
LIBPAYDAYCOIN_CRYPTO_BASE=crypto/libpaydaycoin_crypto_base.a
LIBPAYDAYCOINQT=qt/libpaydaycoinqt.a
LIBSECP256K1=secp256k1/libsecp256k1.la
LIBETHEREUM=ethereum/libethereum.a

if ENABLE_ZMQ
LIBPAYDAYCOIN_ZMQ=libpaydaycoin_zmq.a
endif
if BUILD_PAYDAYCOIN_LIBS
LIBPAYDAYCOINCONSENSUS=libpaydaycoinconsensus.la
endif
if ENABLE_WALLET
LIBPAYDAYCOIN_WALLET=libpaydaycoin_wallet.a
LIBPAYDAYCOIN_WALLET_TOOL=libpaydaycoin_wallet_tool.a
endif

LIBPAYDAYCOIN_CRYPTO= $(LIBPAYDAYCOIN_CRYPTO_BASE)
if ENABLE_SSE41
LIBPAYDAYCOIN_CRYPTO_SSE41 = crypto/libpaydaycoin_crypto_sse41.a
LIBPAYDAYCOIN_CRYPTO += $(LIBPAYDAYCOIN_CRYPTO_SSE41)
endif
if ENABLE_AVX2
LIBPAYDAYCOIN_CRYPTO_AVX2 = crypto/libpaydaycoin_crypto_avx2.a
LIBPAYDAYCOIN_CRYPTO += $(LIBPAYDAYCOIN_CRYPTO_AVX2)
endif
if ENABLE_SHANI
LIBPAYDAYCOIN_CRYPTO_SHANI = crypto/libpaydaycoin_crypto_shani.a
LIBPAYDAYCOIN_CRYPTO += $(LIBPAYDAYCOIN_CRYPTO_SHANI)
endif

$(LIBSECP256K1): $(wildcard secp256k1/src/*.h) $(wildcard secp256k1/src/*.c) $(wildcard secp256k1/include/*)
	$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C $(@D) $(@F)

# Make is not made aware of per-object dependencies to avoid limiting building parallelization
# But to build the less dependent modules first, we manually select their order here:
EXTRA_LIBRARIES += \
  $(LIBPAYDAYCOIN_CRYPTO) \
  $(LIBPAYDAYCOIN_UTIL) \
  $(LIBPAYDAYCOIN_COMMON) \
  $(LIBPAYDAYCOIN_CONSENSUS) \
  $(LIBPAYDAYCOIN_SERVER) \
  $(LIBPAYDAYCOIN_CLI) \
  $(LIBPAYDAYCOIN_WALLET) \
  $(LIBPAYDAYCOIN_WALLET_TOOL) \
  $(LIBPAYDAYCOIN_ZMQ) \
  $(LIBETHEREUM)

lib_LTLIBRARIES = $(LIBPAYDAYCOINCONSENSUS)

bin_PROGRAMS =
noinst_PROGRAMS =
TESTS =
BENCHMARKS =

if BUILD_PAYDAYCOIND
  bin_PROGRAMS += paydaycoind
endif

if BUILD_PAYDAYCOIN_CLI
  bin_PROGRAMS += paydaycoin-cli
endif
if BUILD_PAYDAYCOIN_TX
  bin_PROGRAMS += paydaycoin-tx
endif
if ENABLE_WALLET
if BUILD_PAYDAYCOIN_WALLET
  bin_PROGRAMS += paydaycoin-wallet
endif
endif

.PHONY: FORCE check-symbols check-security
# paydaycoin core #
PAYDAYCOIN_CORE_H = \
  services/graph.h \
  services/witnessaddress.h \
  services/asset.h \
  services/assetallocation.h \
  services/assetconsensus.h \
  services/rpc/assetrpc.h \
  services/rpc/wallet/assetwalletrpc.h \
  thread_pool/fixed_function.hpp \
  thread_pool/mpmc_bounded_queue.hpp \
  thread_pool/thread_pool.hpp \
  thread_pool/thread_pool_options.hpp \
  thread_pool/worker.hpp \
  activemasternode.h \
  spork.h \
  dsnotificationinterface.h \
  governance.h \
  governanceclasses.h \
  governanceexceptions.h \
  governanceobject.h \
  governancevalidators.h \
  governancevote.h \
  governancevotedb.h \
  masternode.h \
  masternodepayments.h \
  masternodesync.h \
  masternodeman.h \
  masternodeconfig.h \
  messagesigner.h \
  netfulfilledman.h \
  flatdatabase.h \
  cachemap.h \
  cachemultimap.h \
  addrdb.h \
  addrman.h \
  attributes.h \
  auxpow.h \
  banman.h \
  base58.h \
  bech32.h \
  bloom.h \
  blockencodings.h \
  blockfilter.h \
  chain.h \
  chainparams.h \
  chainparamsbase.h \
  chainparamsseeds.h \
  checkqueue.h \
  clientversion.h \
  coins.h \
  compat.h \
  compat/assumptions.h \
  compat/byteswap.h \
  compat/endian.h \
  compat/sanity.h \
  compressor.h \
  consensus/consensus.h \
  consensus/tx_check.h \
  consensus/tx_verify.h \
  core_io.h \
  core_memusage.h \
  cuckoocache.h \
  flatfile.h \
  fs.h \
  httprpc.h \
  httpserver.h \
  index/base.h \
  index/blockfilterindex.h \
  index/txindex.h \
  indirectmap.h \
  init.h \
  interfaces/chain.h \
  interfaces/handler.h \
  interfaces/node.h \
  interfaces/wallet.h \
  key.h \
  key_io.h \
  keystore.h \
  dbwrapper.h \
  limitedmap.h \
  logging.h \
  memusage.h \
  merkleblock.h \
  miner.h \
  net.h \
  net_processing.h \
  netaddress.h \
  netbase.h \
  netmessagemaker.h \
  node/coin.h \
  node/psbt.h \
  node/transaction.h \
  noui.h \
  optional.h \
  outputtype.h \
  policy/feerate.h \
  policy/fees.h \
  policy/policy.h \
  policy/rbf.h \
  policy/settings.h \
  pow.h \
  protocol.h \
  psbt.h \
  random.h \
  reverse_iterator.h \
  reverselock.h \
  rpc/auxpow_miner.h \
  rpc/blockchain.h \
  rpc/client.h \
  rpc/mining.h \
  rpc/protocol.h \
  rpc/server.h \
  rpc/rawtransaction_util.h \
  rpc/register.h \
  rpc/util.h \
  scheduler.h \
  script/descriptor.h \
  script/ismine.h \
  script/sigcache.h \
  script/sign.h \
  script/standard.h \
  shutdown.h \
  streams.h \
  support/allocators/secure.h \
  support/allocators/zeroafterfree.h \
  support/cleanse.h \
  support/events.h \
  support/lockedpool.h \
  sync.h \
  threadsafety.h \
  threadinterrupt.h \
  timedata.h \
  torcontrol.h \
  txdb.h \
  txmempool.h \
  ui_interface.h \
  undo.h \
  util/bip32.h \
  util/bytevectorhash.h \
  util/error.h \
  util/fees.h \
  util/system.h \
  util/memory.h \
  util/moneystr.h \
  util/rbf.h \
  util/threadnames.h \
  util/time.h \
  util/url.h \
  util/validation.h \
  util/executable_path/include/boost/executable_path.hpp \
  util/executable_path/include/boost/detail/executable_path_internals.hpp \
  validation.h \
  validationinterface.h \
  versionbits.h \
  versionbitsinfo.h \
  walletinitinterface.h \
  wallet/coincontrol.h \
  wallet/crypter.h \
  wallet/db.h \
  wallet/feebumper.h \
  wallet/fees.h \
  wallet/load.h \
  wallet/psbtwallet.h \
  wallet/rpcwallet.h \
  wallet/wallet.h \
  wallet/walletdb.h \
  wallet/wallettool.h \
  wallet/walletutil.h \
  wallet/coinselection.h \
  warnings.h \
  zmq/zmqabstractnotifier.h \
  zmq/zmqconfig.h\
  zmq/zmqnotificationinterface.h \
  zmq/zmqpublishnotifier.h \
  zmq/zmqrpc.h


obj/build.h: FORCE
	@$(MKDIR_P) $(builddir)/obj
	@$(top_srcdir)/share/genbuild.sh "$(abs_top_builddir)/src/obj/build.h" \
	  "$(abs_top_srcdir)"
libpaydaycoin_util_a-clientversion.$(OBJEXT): obj/build.h

 # ethereum
 ethereum_libethereum_a_CPPFLAGS = $(AM_CPPFLAGS) $(PAYDAYCOIN_INCLUDES)
 ethereum_libethereum_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
 ethereum_libethereum_a_SOURCES = \
  ethereum/address.cpp \
  ethereum/address.h \
  ethereum/common.cpp \
  ethereum/common.h \
  ethereum/commondata.cpp \
  ethereum/commondata.h \
  ethereum/exceptions.h \
  ethereum/fixedhash.cpp \
  ethereum/fixedhash.h \
  ethereum/rlp.cpp \
  ethereum/rlp.h \
  ethereum/sha3.cpp \
  ethereum/sha3.h \
  ethereum/ethereum.cpp \
  ethereum/ethereum.h \
  ethereum/vector_ref.h

# server: shared between paydaycoind and paydaycoin-qt
# Contains code accessing mempool and chain state that is meant to be separated
# from wallet and gui code (see node/README.md). Shared code should go in
# libpaydaycoin_common or libpaydaycoin_util libraries, instead.
libpaydaycoin_server_a_CPPFLAGS = $(AM_CPPFLAGS) $(PAYDAYCOIN_INCLUDES) $(MINIUPNPC_CPPFLAGS) $(EVENT_CFLAGS) $(EVENT_PTHREADS_CFLAGS)
libpaydaycoin_server_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
libpaydaycoin_server_a_SOURCES = \
  services/graph.cpp \
  services/asset.cpp \
  services/assetallocation.cpp \
  services/assetconsensus.cpp \
  services/rpc/assetrpc.cpp \
  core_write.cpp \
  activemasternode.cpp \
  dsnotificationinterface.cpp \
  governance.cpp \
  governanceclasses.cpp \
  governanceobject.cpp \
  governancevalidators.cpp \
  governancevote.cpp \
  governancevotedb.cpp \
  masternode.cpp \
  masternodepayments.cpp \
  masternodesync.cpp \
  masternodeconfig.cpp \
  masternodeman.cpp \
  messagesigner.cpp \
  netfulfilledman.cpp \
  rpc/masternode.cpp \
  rpc/governance.cpp \
  spork.cpp \
  addrdb.cpp \
  addrman.cpp \
  banman.cpp \
  blockencodings.cpp \
  blockfilter.cpp \
  chain.cpp \
  consensus/tx_verify.cpp \
  flatfile.cpp \
  httprpc.cpp \
  httpserver.cpp \
  index/base.cpp \
  index/blockfilterindex.cpp \
  index/txindex.cpp \
  interfaces/chain.cpp \
  interfaces/node.cpp \
  init.cpp \
  dbwrapper.cpp \
  miner.cpp \
  net.cpp \
  net_processing.cpp \
  node/coin.cpp \
  node/psbt.cpp \
  node/transaction.cpp \
  noui.cpp \
  policy/fees.cpp \
  policy/rbf.cpp \
  policy/settings.cpp \
  pow.cpp \
  rest.cpp \
  rpc/auxpow_miner.cpp \
  rpc/blockchain.cpp \
  rpc/mining.cpp \
  rpc/misc.cpp \
  rpc/net.cpp \
  rpc/rawtransaction.cpp \
  rpc/server.cpp \
  script/sigcache.cpp \
  shutdown.cpp \
  timedata.cpp \
  torcontrol.cpp \
  txdb.cpp \
  txmempool.cpp \
  ui_interface.cpp \
  validation.cpp \
  validationinterface.cpp \
  versionbits.cpp \
  $(PAYDAYCOIN_CORE_H)

if ENABLE_WALLET
libpaydaycoin_server_a_SOURCES += wallet/init.cpp
endif
if !ENABLE_WALLET
libpaydaycoin_server_a_SOURCES += dummywallet.cpp
endif

if ENABLE_ZMQ
libpaydaycoin_zmq_a_CPPFLAGS = $(PAYDAYCOIN_INCLUDES) $(ZMQ_CFLAGS)
libpaydaycoin_zmq_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
libpaydaycoin_zmq_a_SOURCES = \
  zmq/zmqabstractnotifier.cpp \
  zmq/zmqnotificationinterface.cpp \
  zmq/zmqpublishnotifier.cpp \
  zmq/zmqrpc.cpp
endif


# wallet: shared between paydaycoind and paydaycoin-qt, but only linked
# when wallet enabled
libpaydaycoin_wallet_a_CPPFLAGS = $(AM_CPPFLAGS) $(PAYDAYCOIN_INCLUDES)
libpaydaycoin_wallet_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
libpaydaycoin_wallet_a_SOURCES = \
  interfaces/wallet.cpp \
  wallet/coincontrol.cpp \
  wallet/crypter.cpp \
  wallet/db.cpp \
  wallet/feebumper.cpp \
  wallet/fees.cpp \
  wallet/load.cpp \
  wallet/psbtwallet.cpp \
  wallet/rpcdump.cpp \
  wallet/rpcwallet.cpp \
  wallet/wallet.cpp \
  wallet/walletdb.cpp \
  wallet/walletutil.cpp \
  wallet/coinselection.cpp \
  rpc/governance.cpp \
  rpc/masternode.cpp \
  services/rpc/wallet/assetwalletrpc.cpp \
  $(PAYDAYCOIN_CORE_H)

libpaydaycoin_wallet_tool_a_CPPFLAGS = $(AM_CPPFLAGS) $(PAYDAYCOIN_INCLUDES)
libpaydaycoin_wallet_tool_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
libpaydaycoin_wallet_tool_a_SOURCES = \
  wallet/wallettool.cpp \
  $(PAYDAYCOIN_CORE_H)

# crypto primitives library
crypto_libpaydaycoin_crypto_base_a_CPPFLAGS = $(AM_CPPFLAGS)
crypto_libpaydaycoin_crypto_base_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
crypto_libpaydaycoin_crypto_base_a_SOURCES = \
  crypto/aes.cpp \
  crypto/aes.h \
  crypto/chacha20.h \
  crypto/chacha20.cpp \
  crypto/common.h \
  crypto/hkdf_sha256_32.cpp \
  crypto/hkdf_sha256_32.h \
  crypto/hmac_sha256.cpp \
  crypto/hmac_sha256.h \
  crypto/hmac_sha512.cpp \
  crypto/hmac_sha512.h \
  crypto/poly1305.h \
  crypto/poly1305.cpp \
  crypto/ripemd160.cpp \
  crypto/ripemd160.h \
  crypto/sha1.cpp \
  crypto/sha1.h \
  crypto/sha256.cpp \
  crypto/sha256.h \
  crypto/sha512.cpp \
  crypto/sha512.h \
  crypto/siphash.cpp \
  crypto/siphash.h \
  crypto/blake.c \
  crypto/bmw.c \
  crypto/groestl.c \
  crypto/jh.c \
  crypto/keccak.c \
  crypto/skein.c \
  crypto/shavite.c \
  crypto/echo.c \
  crypto/sph_blake.h \
  crypto/sph_bmw.h \
  crypto/sph_groestl.h \
  crypto/sph_jh.h \
  crypto/sph_keccak.h \
  crypto/sph_skein.h \
  crypto/sph_types.h \
  crypto/sph_shavite.h \
  crypto/sph_echo.h

if USE_ASM
crypto_libpaydaycoin_crypto_base_a_SOURCES += crypto/sha256_sse4.cpp
endif

crypto_libpaydaycoin_crypto_sse41_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
crypto_libpaydaycoin_crypto_sse41_a_CPPFLAGS = $(AM_CPPFLAGS)
crypto_libpaydaycoin_crypto_sse41_a_CXXFLAGS += $(SSE41_CXXFLAGS)
crypto_libpaydaycoin_crypto_sse41_a_CPPFLAGS += -DENABLE_SSE41
crypto_libpaydaycoin_crypto_sse41_a_SOURCES = crypto/sha256_sse41.cpp

crypto_libpaydaycoin_crypto_avx2_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
crypto_libpaydaycoin_crypto_avx2_a_CPPFLAGS = $(AM_CPPFLAGS)
crypto_libpaydaycoin_crypto_avx2_a_CXXFLAGS += $(AVX2_CXXFLAGS)
crypto_libpaydaycoin_crypto_avx2_a_CPPFLAGS += -DENABLE_AVX2
crypto_libpaydaycoin_crypto_avx2_a_SOURCES = crypto/sha256_avx2.cpp

crypto_libpaydaycoin_crypto_shani_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
crypto_libpaydaycoin_crypto_shani_a_CPPFLAGS = $(AM_CPPFLAGS)
crypto_libpaydaycoin_crypto_shani_a_CXXFLAGS += $(SHANI_CXXFLAGS)
crypto_libpaydaycoin_crypto_shani_a_CPPFLAGS += -DENABLE_SHANI
crypto_libpaydaycoin_crypto_shani_a_SOURCES = crypto/sha256_shani.cpp

# consensus: shared between all executables that validate any consensus rules.
libpaydaycoin_consensus_a_CPPFLAGS = $(AM_CPPFLAGS) $(PAYDAYCOIN_INCLUDES)
libpaydaycoin_consensus_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
libpaydaycoin_consensus_a_SOURCES = \
  amount.h \
  arith_uint256.cpp \
  arith_uint256.h \
  consensus/merkle.cpp \
  consensus/merkle.h \
  consensus/params.h \
  consensus/tx_check.cpp \
  consensus/validation.h \
  hash.cpp \
  hash.h \
  prevector.h \
  primitives/block.cpp \
  primitives/block.h \
  primitives/pureheader.cpp \
  primitives/pureheader.h \
  primitives/transaction.cpp \
  primitives/transaction.h \
  pubkey.cpp \
  pubkey.h \
  script/paydaycoinconsensus.cpp \
  script/interpreter.cpp \
  script/interpreter.h \
  script/script.cpp \
  script/script.h \
  script/script_error.cpp \
  script/script_error.h \
  serialize.h \
  span.h \
  tinyformat.h \
  uint256.cpp \
  uint256.h \
  util/strencodings.cpp \
  util/strencodings.h \
  version.h

# common: shared between paydaycoind, and paydaycoin-qt and non-server tools
libpaydaycoin_common_a_CPPFLAGS = $(AM_CPPFLAGS) $(PAYDAYCOIN_INCLUDES)
libpaydaycoin_common_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
libpaydaycoin_common_a_SOURCES = \
  auxpow.cpp \
  base58.cpp \
  bech32.cpp \
  bloom.cpp \
  chainparams.cpp \
  coins.cpp \
  compressor.cpp \
  core_read.cpp \
  key.cpp \
  key_io.cpp \
  keystore.cpp \
  merkleblock.cpp \
  netaddress.cpp \
  netbase.cpp \
  outputtype.cpp \
  policy/feerate.cpp \
  policy/policy.cpp \
  protocol.cpp \
  psbt.cpp \
  rpc/rawtransaction_util.cpp \
  rpc/util.cpp \
  scheduler.cpp \
  script/descriptor.cpp \
  script/ismine.cpp \
  script/sign.cpp \
  script/standard.cpp \
  versionbitsinfo.cpp \
  warnings.cpp \
  $(PAYDAYCOIN_CORE_H)

# util: shared between all executables.
# This library *must* be included to make sure that the glibc
# backward-compatibility objects and their sanity checks are linked.
libpaydaycoin_util_a_CPPFLAGS = $(AM_CPPFLAGS) $(PAYDAYCOIN_INCLUDES)
libpaydaycoin_util_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
libpaydaycoin_util_a_SOURCES = \
  support/lockedpool.cpp \
  chainparamsbase.cpp \
  clientversion.cpp \
  compat/glibc_sanity.cpp \
  compat/glibcxx_sanity.cpp \
  compat/strnlen.cpp \
  fs.cpp \
  interfaces/handler.cpp \
  logging.cpp \
  random.cpp \
  rpc/protocol.cpp \
  support/cleanse.cpp \
  sync.cpp \
  threadinterrupt.cpp \
  util/bip32.cpp \
  util/bytevectorhash.cpp \
  util/error.cpp \
  util/fees.cpp \
  util/system.cpp \
  util/moneystr.cpp \
  util/rbf.cpp \
  util/threadnames.cpp \
  util/strencodings.cpp \
  util/time.cpp \
  util/url.cpp \
  util/validation.cpp \
  util/executable_path/src/executable_path.cpp \
  util/executable_path/src/detail/executable_path_internals_bsd.cpp \
  util/executable_path/src/detail/executable_path_internals_common.cpp \
  util/executable_path/src/detail/executable_path_internals_linux.cpp \
  util/executable_path/src/detail/executable_path_internals_macintosh.cpp \
  util/executable_path/src/detail/executable_path_internals_other.cpp \
  util/executable_path/src/detail/executable_path_internals_qnx.cpp \
  util/executable_path/src/detail/executable_path_internals_solaris.cpp \
  util/executable_path/src/detail/executable_path_internals_windows.cpp \
  $(PAYDAYCOIN_CORE_H)

if GLIBC_BACK_COMPAT
libpaydaycoin_util_a_SOURCES += compat/glibc_compat.cpp
AM_LDFLAGS += $(COMPAT_LDFLAGS)
endif

# cli: shared between paydaycoin-cli and paydaycoin-qt
libpaydaycoin_cli_a_CPPFLAGS = $(AM_CPPFLAGS) $(PAYDAYCOIN_INCLUDES)
libpaydaycoin_cli_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
libpaydaycoin_cli_a_SOURCES = \
  rpc/client.cpp \
  $(PAYDAYCOIN_CORE_H)

nodist_libpaydaycoin_util_a_SOURCES = $(srcdir)/obj/build.h
#

# paydaycoind binary #
paydaycoind_SOURCES = paydaycoind.cpp
paydaycoind_CPPFLAGS = $(AM_CPPFLAGS) $(PAYDAYCOIN_INCLUDES)
paydaycoind_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
paydaycoind_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)

if TARGET_WINDOWS
paydaycoind_SOURCES += paydaycoind-res.rc
endif

# Libraries below may be listed more than once to resolve circular dependencies (see
# https://eli.thegreenplace.net/2013/07/09/library-order-in-static-linking#circular-dependency)
paydaycoind_LDADD = \
  $(LIBPAYDAYCOIN_SERVER) \
  $(LIBPAYDAYCOIN_WALLET) \
  $(LIBPAYDAYCOIN_COMMON) \
  $(LIBUNIVALUE) \
  $(LIBPAYDAYCOIN_UTIL) \
  $(LIBPAYDAYCOIN_ZMQ) \
  $(LIBPAYDAYCOIN_CONSENSUS) \
  $(LIBPAYDAYCOIN_CRYPTO) \
  $(LIBLEVELDB) \
  $(LIBLEVELDB_SSE42) \
  $(LIBMEMENV) \
  $(LIBSECP256K1) \
  $(LIBETHEREUM)

paydaycoind_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS) $(ZMQ_LIBS)

# paydaycoin-cli binary #
paydaycoin_cli_SOURCES = paydaycoin-cli.cpp
paydaycoin_cli_CPPFLAGS = $(AM_CPPFLAGS) $(PAYDAYCOIN_INCLUDES) $(EVENT_CFLAGS)
paydaycoin_cli_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
paydaycoin_cli_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)

if TARGET_WINDOWS
paydaycoin_cli_SOURCES += paydaycoin-cli-res.rc
endif

paydaycoin_cli_LDADD = \
  $(LIBPAYDAYCOIN_CLI) \
  $(LIBUNIVALUE) \
  $(LIBPAYDAYCOIN_UTIL) \
  $(LIBPAYDAYCOIN_CRYPTO)

paydaycoin_cli_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS) $(EVENT_LIBS)
#

# paydaycoin-tx binary #
paydaycoin_tx_SOURCES = paydaycoin-tx.cpp
paydaycoin_tx_CPPFLAGS = $(AM_CPPFLAGS) $(PAYDAYCOIN_INCLUDES)
paydaycoin_tx_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
paydaycoin_tx_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)

if TARGET_WINDOWS
paydaycoin_tx_SOURCES += paydaycoin-tx-res.rc
endif

paydaycoin_tx_LDADD = $(paydaycoind_LDADD)
#

# paydaycoin-wallet binary #
paydaycoin_wallet_SOURCES = paydaycoin-wallet.cpp
paydaycoin_wallet_CPPFLAGS = $(AM_CPPFLAGS) $(PAYDAYCOIN_INCLUDES)
paydaycoin_wallet_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
paydaycoin_wallet_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)

if TARGET_WINDOWS
paydaycoin_wallet_SOURCES += paydaycoin-wallet-res.rc
endif

paydaycoin_wallet_LDADD = \
  $(LIBPAYDAYCOIN_WALLET_TOOL) \
  $(LIBPAYDAYCOIN_WALLET) \
  $(LIBPAYDAYCOIN_SERVER) \
  $(LIBPAYDAYCOIN_COMMON) \
  $(LIBPAYDAYCOIN_CONSENSUS) \
  $(LIBPAYDAYCOIN_UTIL) \
  $(LIBPAYDAYCOIN_CRYPTO) \
  $(LIBPAYDAYCOIN_ZMQ) \
  $(LIBLEVELDB) \
  $(LIBLEVELDB_SSE42) \
  $(LIBMEMENV) \
  $(LIBSECP256K1) \
  $(LIBUNIVALUE) \
  $(LIBETHEREUM)

paydaycoin_wallet_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(CRYPTO_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS) $(MINIUPNPC_LIBS) $(ZMQ_LIBS)

# paydaycoin bench #
paydaycoinbench_SOURCES = paydaycoinbench.cpp
paydaycoinbench_CPPFLAGS = $(AM_CPPFLAGS) $(PAYDAYCOIN_INCLUDES) $(EVENT_CLFAGS) $(EVENT_PTHREADS_CFLAGS)
paydaycoinbench_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
paydaycoinbench_LDFLAGS = $(BOOST_LIBS) $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)

paydaycoinbench_LDADD = \
  $(LIBPAYDAYCOIN_COMMON) \
  $(LIBPAYDAYCOIN_CONSENSUS) \
  $(LIBPAYDAYCOIN_CRYPTO) \
  $(LIBSECP256K1)

# paydaycoinconsensus library #
if BUILD_PAYDAYCOIN_LIBS
include_HEADERS = script/paydaycoinconsensus.h
libpaydaycoinconsensus_la_SOURCES = $(crypto_libpaydaycoin_crypto_base_a_SOURCES) $(libpaydaycoin_consensus_a_SOURCES)

if GLIBC_BACK_COMPAT
  libpaydaycoinconsensus_la_SOURCES += compat/glibc_compat.cpp
endif

libpaydaycoinconsensus_la_LDFLAGS = $(AM_LDFLAGS) -no-undefined $(RELDFLAGS)
libpaydaycoinconsensus_la_LIBADD = $(LIBSECP256K1)
libpaydaycoinconsensus_la_CPPFLAGS = $(AM_CPPFLAGS) -I$(builddir)/obj -I$(srcdir)/secp256k1/include -DBUILD_PAYDAYCOIN_INTERNAL
libpaydaycoinconsensus_la_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)

endif

# paydaycoin pre-built binaries #
dist_bin_SCRIPTS =
if TARGET_WINDOWS
  dist_bin_SCRIPTS += bin/win64/pdaygeth.nod.exe bin/win64/pdayrelayer.nod.exe
  dist_bin_SCRIPTS += bin/win64/sha3.node bin/win64/bufferutil.node bin/win64/scrypt.node bin/win64/validation.node
endif
if TARGET_LINUX
  dist_bin_SCRIPTS += bin/linux/pdaygeth.nod bin/linux/pdayrelayer.nod
  dist_bin_SCRIPTS += bin/linux/sha3.node bin/linux/bufferutil.node bin/linux/scrypt.node bin/linux/validation.node
endif
if TARGET_DARWIN
  dist_bin_SCRIPTS += bin/osx/pdaygeth.nod bin/osx/pdayrelayer.nod
  dist_bin_SCRIPTS += bin/osx/sha3.node bin/osx/bufferutil.node bin/osx/scrypt.node bin/osx/validation.node
endif

#

CTAES_DIST =  crypto/ctaes/bench.c
CTAES_DIST += crypto/ctaes/ctaes.c
CTAES_DIST += crypto/ctaes/ctaes.h
CTAES_DIST += crypto/ctaes/README.md
CTAES_DIST += crypto/ctaes/test.c

CLEANFILES = $(EXTRA_LIBRARIES)

CLEANFILES += *.gcda *.gcno
CLEANFILES += compat/*.gcda compat/*.gcno
CLEANFILES += consensus/*.gcda consensus/*.gcno
CLEANFILES += crypto/*.gcda crypto/*.gcno
CLEANFILES += policy/*.gcda policy/*.gcno
CLEANFILES += primitives/*.gcda primitives/*.gcno
CLEANFILES += script/*.gcda script/*.gcno
CLEANFILES += support/*.gcda support/*.gcno
CLEANFILES += univalue/*.gcda univalue/*.gcno
CLEANFILES += wallet/*.gcda wallet/*.gcno
CLEANFILES += wallet/test/*.gcda wallet/test/*.gcno
CLEANFILES += zmq/*.gcda zmq/*.gcno
CLEANFILES += obj/build.h

EXTRA_DIST = $(CTAES_DIST)


config/paydaycoin-config.h: config/stamp-h1
	@$(MAKE) -C $(top_builddir) $(subdir)/$(@)
config/stamp-h1: $(top_srcdir)/$(subdir)/config/paydaycoin-config.h.in $(top_builddir)/config.status
	$(AM_V_at)$(MAKE) -C $(top_builddir) $(subdir)/$(@)
$(top_srcdir)/$(subdir)/config/paydaycoin-config.h.in:  $(am__configure_deps)
	$(AM_V_at)$(MAKE) -C $(top_srcdir) $(subdir)/config/paydaycoin-config.h.in

clean-local:
	-$(MAKE) -C secp256k1 clean
	-$(MAKE) -C univalue clean
	-rm -f leveldb/*/*.gcda leveldb/*/*.gcno leveldb/helpers/memenv/*.gcda leveldb/helpers/memenv/*.gcno
	-rm -f config.h
	-rm -rf test/__pycache__

.rc.o:
	@test -f $(WINDRES)
	## FIXME: How to get the appropriate modulename_CPPFLAGS in here?
	$(AM_V_GEN) $(WINDRES) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(CPPFLAGS) -DWINDRES_PREPROC -i $< -o $@

check-symbols: $(bin_PROGRAMS)
if GLIBC_BACK_COMPAT
	@echo "Checking glibc back compat..."
	$(AM_V_at) READELF=$(READELF) CPPFILT=$(CPPFILT) $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py < $(bin_PROGRAMS)
endif

check-security: $(bin_PROGRAMS)
if HARDEN
	@echo "Checking binary security..."
	$(AM_V_at) READELF=$(READELF) OBJDUMP=$(OBJDUMP) $(PYTHON) $(top_srcdir)/contrib/devtools/security-check.py < $(bin_PROGRAMS)
endif

if ENABLE_BIP70
%.pb.cc %.pb.h: %.proto
	@test -f $(PROTOC)
	$(AM_V_GEN) $(PROTOC) --cpp_out=$(@D) --proto_path=$(<D) $<
endif

if EMBEDDED_LEVELDB
include Makefile.leveldb.include
endif

if ENABLE_TESTS
include Makefile.test.include
endif

if ENABLE_BENCH
include Makefile.bench.include
endif

if ENABLE_QT
include Makefile.qt.include
endif

if ENABLE_QT_TESTS
include Makefile.qttest.include
endif
